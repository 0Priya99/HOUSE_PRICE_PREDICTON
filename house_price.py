# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13gw9kTPgk10lBWm0mdRpAHqA9HRbpLZA
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_california_housing
housing=fetch_california_housing()

housing

print(housing.feature_names)

print(housing.target)

"""**prepare the data**"""

df=pd.DataFrame(housing.data,columns=housing.feature_names)

type(df)

df.head()

df.tail()

df["Price"]=housing.target

df.info()

df.isnull().sum()

"""**EDA- exploratry data  analysis**"""

df.corr()

sns.pairplot(df)

sns.boxplot(data=df,orient="h")

##split the data into independent and dependent feature
x=df.iloc[:,:-1]
y=df.iloc[:,-1]

x

y

#split the data into train and test
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x , y ,test_size=0.3,random_state=42)

x_train

x_test

y_train

y_test

#normalization of given data point
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train_norm =scaler.fit_transform(x_train)
x_test_norm=scaler.transform(x_test)

fig,ax=plt.subplots(figsize=(15,15))
sns.boxplot(data=x_train_norm,ax=ax)

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train_norm,y_train)

print(model.coef_)

print(model.intercept_)

"""**model prediction**"""

pred=model.predict(x_test_norm)
pred

#calculate the error
error=y_test-pred

error

sns.displot(error,kind="kde")

"""**model performance**"""

from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score
print(mean_squared_error(y_test,pred))
print(mean_absolute_error(y_test,pred))
print(r2_score(y_test,pred))
print(np.sqrt(mean_squared_error(y_test,pred)))

"""**adjusted r square**"""

score=(r2_score(y_test,pred))
1-(1-score)*(len(y_test)-1)/(len(y_test)-x_test.shape[1]-1)

"""**save the model**"""

import pickle
pickle.dump(model,open("model.pkl","wb"))

model=pickle.load(open("model.pkl","rb"))

model.predict(scaler.transform(housing.data[0].reshape(1,-1)))